var mapboxUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
	mapboxAttribution = '&copy <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	mapCenter = [42.709991964177007,23.252703540367698],
	distance = 30, current_position, current_accuracy, nametip,
	mapstyle = L.tileLayer(mapboxUrl, {id: 'mapbox.light', attribution: mapboxAttribution, maxNativeZoom: 19, maxZoom: 26, updateWhenZooming: false}),
	map = new L.map('map',{layer: mapstyle, center: [mapCenter[0], mapCenter[1]], zoom: 18, minZoom:13, maxZoom:26, updateWhenZooming: false}),
	onLineClick = function(event){
		var label = event.target.options.label,
			content = event.target.options.id,
			otherStuff = event.target.options.otherStuff,
			latlng = map.mouseEventToLatLng(event.originalEvent);
			console.log(label, " id:" + content," coords:" + latlng.lat + ', ' + latlng.lng);
			window.location.href = path + event.target.options.id + '?lat=' + latlng.lat + '&lng=' + latlng.lng;
	},
	paint = function(event) {
		var label = event.target.options.label,
			latlng = map.mouseEventToLatLng(event.originalEvent);
		console.log([latlng.lat, latlng.lng]);
		/*nametip = new L.Marker([latlng.lat, latlng.lng], {
			icon: new L.DivIcon({
				className: 'mainMarker',
				html: ''+
					  '<span class="my-div-span">'+label+'</span>'
			})
		}).addTo(map);*/
		event.sourceTarget.setStyle({color: event.target.options.hover});
	},
	paintBack = function(event) {
		event.sourceTarget.setStyle({color: event.target.options.paint});
		//map.removeLayer(nametip);
	},
	updateMap = function(e){
		var coords = map.getBounds();
		//console.log(L.control.layers);
		$('.leaflet-control-layers.leaflet-control').remove();
		$('.leaflet-overlay-pane>svg>g').html('');
		//map.removeLayer(baseMaps);
		//map.removeLayer(overlayMaps);
		$.ajax({
			data: {
				in : coords._southWest.lng+','+coords._northEast.lat+','+coords._southWest.lng+','+coords._southWest.lat+','+coords._northEast.lng+','+coords._southWest.lat+','+coords._northEast.lng+','+coords._northEast.lat+','+coords._southWest.lng+','+coords._northEast.lat
			},
			//
			url: "/front-end/map?", success: function(results){
				var layers = {}, types = {}, drawTypes = {}, renderLayers = [], styles = {};
				$.each(results.settings.category, function(){
					styles[this.name] = this.style.stroke;
				});
				console.log(styles);
				$.each(results.objects, function(){
					if (this.hasOwnProperty('properties') && this.properties.hasOwnProperty('type')) {
						if (!types.hasOwnProperty(this.properties.type)) {
							types[this.properties.type] = [];
							layers[this.properties.type] = L.layerGroup();
						}
						types[this.properties.type].push(this);
					}
				})
				$.each(types, function(i,e){
					$.each(e, function(si,se){
						if (!drawTypes.hasOwnProperty(this.geometry.type)) {
							drawTypes[this.geometry.type] = 1;
						}
						else {
							drawTypes[this.geometry.type] = drawTypes[this.geometry.type] + 1;
						}
						switch(this.geometry.type) {
							case "MultiLineString":
								var latlngs = [];
								for (var i=0; i < this.geometry.coordinates[0].length; i++) {
									latlngs.push(new L.LatLng(Number(this.geometry.coordinates[0][i][1]),Number(this.geometry.coordinates[0][i][0])));
								}
								if (this.properties.category === "Категория-1") {
									this.properties.category = "Алеи";
								}
								var multiPolyLineOptions = {"color": styles[this.properties.category].color, "weight": styles[this.properties.category].width, "opacity": styles[this.properties.category].opacity, 'label': this.properties.name, 'id': this.id, 'hover': 'black', "paint": styles[this.properties.category].color},     
									multipolyline = new L.Polyline(latlngs,multiPolyLineOptions).addTo(layers[this.properties.type]).on('click', onLineClick).on('mouseover', paint).on('mouseout', paintBack);
							break;
						}

					});
				});
				$.each(layers, function(k,v){
					var layer = v;
					renderLayers.push(layer);
				})
				//var grayscale = L.tileLayer(mapboxUrl, {id: 'mapbox.light', attribution: mapboxAttribution, maxNativeZoom: 19, maxZoom: 26, updateWhenZooming: false});
				//map = new L.map('map',{layers:[grayscale, renderLayers[0]], center: [mapCenter[0], mapCenter[1]], zoom: 18, minZoom:13, maxZoom:26, updateWhenZooming: false});

				var baseMaps = {
					//"Grayscale": mapstyle
				};

				var overlayMaps = {};

				$.each(layers, function(i,e){
					overlayMaps[i] = e;
					map.addLayer(e);
				})



				function onLocationFound(e) {
				  // if position defined, then remove the existing position marker and accuracy circle from the map
				  if (current_position) {
					  map.removeLayer(current_position);
					  map.removeLayer(current_accuracy);
				  }

				  var radius = e.accuracy / 2;

				  current_position = L.marker(e.latlng).addTo(map)
					//.bindPopup("You are within " + radius + " meters from this point").openPopup();

				  current_accuracy = L.circle(e.latlng, radius).addTo(map);
				}

				function onLocationError(e) {
				  alert(e.message);
				}

				map.on('locationfound', onLocationFound);
				map.on('locationerror', onLocationError);

				// wrap map.locate in a function    
				L.control.layers(baseMaps, overlayMaps).addTo(map);
				//locate(); 


			}
		});
	},
	updateZoom = function(){console.log(map.getBounds())},
	customControl =  L.Control.extend({        
		options: {
			position: 'bottomright'
		},
		onAdd: function (map) {
			var container = L.DomUtil.create('i', 'leaflet-bar far fa-dot-circle');
			container.type="button";
			container.onclick = function(){
				locate();
			}
			return container;
		}
	}),
	locate = function() {
		map.locate({setView: true, maxZoom: 16});
	};
mapstyle.addTo(map);
updateMap();
map.addControl(new customControl()).on('dragend', updateMap).on('zoom', updateMap);
	
/*$(document).ready(function(){
	"use strict";
	$.ajax({
		data: {
			center : mapCenter[0]+','+mapCenter[1],
			distance: distance
		},
		url: "/api/network?", success: function(results){
			var layers = {}, types = {}, drawTypes = {}, renderLayers = [];
			$.each(results, function(){
				if (this.hasOwnProperty('properties') && this.properties.hasOwnProperty('type')) {
					if (!types.hasOwnProperty(this.properties.type)) {
						types[this.properties.type] = [];
						layers[this.properties.type] = L.layerGroup();
					}
					types[this.properties.type].push(this);
				}
			})
			$.each(types, function(i,e){
				$.each(e, function(si,se){
					if (!drawTypes.hasOwnProperty(this.geometry.type)) {
						drawTypes[this.geometry.type] = 1;
					}
					else {
						drawTypes[this.geometry.type] = drawTypes[this.geometry.type] + 1;
					}
					switch(this.geometry.type) {
						case "MultiLineString":
							var latlngs = [];
							for (var i=0; i < this.geometry.coordinates[0].length; i++) {
								latlngs.push(new L.LatLng(Number(this.geometry.coordinates[0][i][1]),Number(this.geometry.coordinates[0][i][0])));
							}
							var multiPolyLineOptions = {"color": "#ff7800", "weight": 5, "opacity": 0.65,color: 'red', fillColor: '#f03', 'label': this.properties.name, 'id': this.id},
								multipolyline = new L.Polyline(latlngs,multiPolyLineOptions).addTo(layers[this.properties.type]).on('click', onLineClick);
						break;
					}

				});
			});
			$.each(layers, function(k,v){
				var layer = v;
				renderLayers.push(layer);
			})
			//var grayscale = L.tileLayer(mapboxUrl, {id: 'mapbox.light', attribution: mapboxAttribution, maxNativeZoom: 19, maxZoom: 26, updateWhenZooming: false});
  			//map = new L.map('map',{layers:[grayscale, renderLayers[0]], center: [mapCenter[0], mapCenter[1]], zoom: 18, minZoom:13, maxZoom:26, updateWhenZooming: false});

			var baseMaps = {
				"Grayscale": mapstyle
			};

			var overlayMaps = {};
			
			$.each(layers, function(i,e){
				overlayMaps[i] = e;
			})
			
			

			function onLocationFound(e) {
			  // if position defined, then remove the existing position marker and accuracy circle from the map
			  if (current_position) {
				  map.removeLayer(current_position);
				  map.removeLayer(current_accuracy);
			  }

			  var radius = e.accuracy / 2;

			  current_position = L.marker(e.latlng).addTo(map)
				//.bindPopup("You are within " + radius + " meters from this point").openPopup();

			  current_accuracy = L.circle(e.latlng, radius).addTo(map);
			}

			function onLocationError(e) {
			  alert(e.message);
			}

			map.on('locationfound', onLocationFound);
			map.on('locationerror', onLocationError);

			// wrap map.locate in a function    
			
			L.control.layers(baseMaps, overlayMaps).addTo(map);
			
			map
				.addControl(new customControl())
				.on('dragend', updateMap);
			//locate(); 


		}
	});
})*/
